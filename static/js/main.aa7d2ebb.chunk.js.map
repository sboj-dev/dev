{"version":3,"sources":["Home.js","Jobs.js","App.js","serviceWorker.js","index.js"],"names":["Home","to","Jobs","id","useParams","fetch","then","res","json","result","console","log","App","useState","sidebar","basename","process","Grommet","full","theme","grommet","Grid","fill","rows","columns","areas","name","start","end","Box","gridArea","background","width","animation","type","duration","size","style","fontFamily","fontSize","fontWeight","color","map","Button","key","href","hoverIndicator","pad","horizontal","vertical","Text","justify","align","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uQAceA,MAXf,WACE,OACI,6BACI,oCACA,kBAAC,IAAD,CAAMC,GAAG,YAAT,mBAA0C,6BAC1C,kBAAC,IAAD,CAAMA,GAAG,YAAT,mBAA0C,6BAC1C,kBAAC,IAAD,CAAMA,GAAG,YAAT,qBAA4C,+BCUvCC,MAhBf,WAAiB,IACTC,EAAOC,cAAPD,GAON,OANAE,MAAM,gFACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACCC,QAAQC,IAAIF,MAGhB,6BACE,4BAAKN,GACL,kBAAC,IAAD,CAAMF,GAAG,KAAT,a,gDC6ESW,MAlFf,WAAgB,IAAD,EACiBC,oBAAS,GAD1B,mBACNC,EADM,KAQb,OARa,KAEbT,MAAM,uEACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACCC,QAAQC,IAAIF,MAGhB,kBAAC,IAAD,CAAQM,SAAUC,QAChB,kBAACC,EAAA,EAAD,CAASC,MAAI,EAACC,MAAOC,WACnB,kBAACC,EAAA,EAAD,CACEC,MAAI,EACJC,KAAM,CAAC,OAAQ,QACfC,QAAS,CAAC,OAAQ,QAClBC,MAAO,CACL,CAAEC,KAAM,UAAWC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,IAC3C,CAAEF,KAAM,OAAQC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,MAGzCd,GACC,kBAACe,EAAA,EAAD,CACEC,SAAS,UACTC,WAAW,UACXC,MAAM,QACNC,UAAW,CACT,CAAEC,KAAM,SAAUC,SAAU,KAC5B,CAAED,KAAM,aAAcE,KAAM,SAAUD,SAAU,OAGlD,wBAAIE,MAAO,CACTC,WAAY,qBACZC,SAAU,GACVC,WAAY,IACZC,MAAO,YAJT,KAKK,0BAAMJ,MAAO,CAACI,MAAO,YAArB,KALL,KAMC,CAAC,OAAQ,QAAQC,KAAI,SAAAhB,GAAI,OACxB,kBAACiB,EAAA,EAAD,CAAQC,IAAKlB,EAAMmB,KAAK,IAAIC,gBAAc,GACxC,kBAACjB,EAAA,EAAD,CAAKkB,IAAK,CAAEC,WAAY,SAAUC,SAAU,UAC1C,kBAACC,EAAA,EAAD,KAAOxB,SAMjB,kBAACG,EAAA,EAAD,CAAKC,SAAS,OAAOqB,QAAQ,SAASC,MAAM,SAASrB,WAAW,WAC9D,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,IAAIC,UAAWvD,IACjC,kBAAC,IAAD,CAAOqD,OAAK,EAACC,KAAK,WAAWC,UAAWrD,SC5ChCsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9D,MAAK,SAAA+D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9D,QAAQ8D,MAAMA,EAAMC,c","file":"static/js/main.aa7d2ebb.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Home() {\n  return (\n      <div>\n          <h1>Jobs</h1>\n          <Link to=\"/job/abc\">Awesome job one</Link><br />\n          <Link to=\"/job/cde\">Awesome job two</Link><br />\n          <Link to=\"/job/123\">Awesome job three</Link><br />\n      </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { Link, useParams } from 'react-router-dom';\n\nfunction Jobs() {\n  let { id } = useParams();\n  fetch(\"https://qi827wd4q4.execute-api.eu-west-1.amazonaws.com/api/sboj-job-function\")\n    .then(res => res.json())\n    .then(\n      (result) => {\n        console.log(result)\n      })\n  return (\n    <div>\n      <h1>{id}</h1>\n      <Link to=\"/\">Go back</Link>\n    </div>\n  );\n}\n\nexport default Jobs;\n","import React, { useState } from \"react\";\n// import logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './Home.js';\nimport Jobs from './Jobs.js';\nimport { Grommet, Box, Button, Grid, Text } from \"grommet\";\nimport { grommet } from \"grommet/themes\";\n\nfunction App() {\n  const [sidebar, setSidebar] = useState(true);\n  fetch(\"https://0jzvzdhkz4.execute-api.eu-west-1.amazonaws.com/prod/testing\")\n    .then(res => res.json())\n    .then(\n      (result) => {\n        console.log(result)\n      })\n  return (\n    <Router basename={process.env.REACT_APP_ROUTER_BASENAME}>\n      <Grommet full theme={grommet}>\n        <Grid\n          fill\n          rows={[\"auto\", \"flex\"]}\n          columns={[\"auto\", \"flex\"]}\n          areas={[\n            { name: \"sidebar\", start: [0, 1], end: [0, 1] },\n            { name: \"main\", start: [1, 1], end: [1, 1] }\n          ]}\n        >\n          {sidebar && (\n            <Box\n              gridArea=\"sidebar\"\n              background=\"#FFFFFF\"\n              width=\"small\"\n              animation={[\n                { type: \"fadeIn\", duration: 300 },\n                { type: \"slideRight\", size: \"xlarge\", duration: 150 }\n              ]}\n            >\n              <h1 style={{\n                fontFamily: 'Righteous, cursive',\n                fontSize: 58,\n                fontWeight: 400,\n                color: '#424242'\n              }}>Sb<span style={{color: '#08CAA0'}}>o</span>j</h1>\n              {[\"Home\", \"Jobs\"].map(name => (\n                <Button key={name} href=\"#\" hoverIndicator>\n                  <Box pad={{ horizontal: \"medium\", vertical: \"small\" }}>\n                    <Text>{name}</Text>\n                  </Box>\n                </Button>\n              ))}\n            </Box>\n          )}\n          <Box gridArea=\"main\" justify=\"center\" align=\"center\" background=\"#EEEEEE\">\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/job/:id\" component={Jobs} />\n        </Box>\n        </Grid>\n      </Grommet>\n    </Router>\n  );\n}\n\n{/* <header className=\"App-header\">\n          <div style={{\n            backgroundColor: 'white',\n            width: 600,\n            color: 'black'\n          }}>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/job/:id\" component={Jobs} />\n\n\n\n          </div> */}\n{/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n{/* </header>\n      </div> */}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}